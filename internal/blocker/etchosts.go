package blocker

import (
	"bufio"
	"fmt"
	"os"
	"strings"
)

const startBlock string = "# [START] generated by BBTS, do not remove or modify."
const endBlock string = "# [END] generated by BBTS, do not remove or modify."

func GenerateEtcHosts(blocklist []string) string {
	var etcHostsPart strings.Builder

	etcHostsPart.WriteString(startBlock)
	etcHostsPart.WriteString("\n")
	
	for _, url := range blocklist {
		etcHostsPart.WriteString(fmt.Sprintf("127.0.0.1 %s\n", url))
		etcHostsPart.WriteString(fmt.Sprintf("127.0.0.1 www.%s\n", url))
	}
	
	etcHostsPart.WriteString(endBlock)
	etcHostsPart.WriteString("\n")

	return etcHostsPart.String()
}

func FileTamperedWith(file *os.File, blockPart string) bool {
	resetReaderPointer(file)

	var foundBlockPart strings.Builder
	shouldWrite := false
	scanner := bufio.NewScanner(file)
	
    for scanner.Scan() {
        text := scanner.Text()
		if text == startBlock {
			shouldWrite = true
		}

		if shouldWrite {
			foundBlockPart.WriteString(text)
			foundBlockPart.WriteString("\n")
		}

		if text == endBlock {
			shouldWrite = false
		}
    }

	return foundBlockPart.String() != blockPart
}

func AddBlock(file *os.File, content string) {
	resetReaderPointer(file)
	file.WriteString(content)
}

func RemoveBlock(file *os.File) {
	// this only removes a untampered block section
	resetReaderPointer(file)

	var lines []string
	shouldAdd := true

    scanner := bufio.NewScanner(file)

    for scanner.Scan() {
		text := scanner.Text()

		if text == startBlock {
			shouldAdd = false
		}
		
		if shouldAdd {
			lines = append(lines, text)
		}
		
		if text == endBlock {
			shouldAdd = true
		}
    }

	file.Truncate(0)
	resetReaderPointer(file)

	for _, line := range lines {
		file.WriteString(line)
		file.WriteString("\n")
	}
}

func resetReaderPointer(file *os.File) {
	_, err := file.Seek(0, 0)
	if err != nil {
		os.Exit(1)
	}
}